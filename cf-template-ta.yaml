AWSTemplateFormatVersion: '2010-09-09'
Description: 'Three-tier architecture for Tungsten TotalAgility and RPA with SQL Server 2022'

Parameters:
  EnvironmentName:
    Description: Environment name (dev, test, prod)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24
  
  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24
  
  AppSubnet1CIDR:
    Description: CIDR block for Application Subnet 1
    Type: String
    Default: 10.0.3.0/24
  
  AppSubnet2CIDR:
    Description: CIDR block for Application Subnet 2
    Type: String
    Default: 10.0.4.0/24
  
  DBSubnet1CIDR:
    Description: CIDR block for Database Subnet 1
    Type: String
    Default: 10.0.5.0/24
  
  DBSubnet2CIDR:
    Description: CIDR block for Database Subnet 2
    Type: String
    Default: 10.0.6.0/24
  
  DBUsername:
    Description: SQL Server admin username
    Type: String
    NoEcho: true
  
  DBPassword:
    Description: SQL Server admin password
    Type: String
    NoEcho: true
    MinLength: 8
    ConstraintDescription: Must be at least 8 characters
  
  KeyPairName:
    Description: EC2 Key Pair for RDP access
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionToAMI:
    ap-southeast-1:
      WindowsServer2022: ami-0482455c4148846e3

Resources:
  # IAM Role for EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2InstanceRole

  # Instance Profile for the role
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets (Web Tier)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Application Subnets (App Tier)
  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref AppSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppSubnet1

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref AppSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppSubnet2

  # Database Subnets (DB Tier)
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref DBSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBSubnet1

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref DBSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBSubnet2

  # Route Tables and Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # NAT Gateway for private subnets
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppSubnet1

  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppSubnet2

  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnet1

  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnet2

  # Security Groups
  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0  # In production, restrict to specific IP ranges
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebTierSG
          
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0  # In production, restrict to specific IP ranges
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionSG

  AppTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppTierSG

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for database tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref AppTierSecurityGroup
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBSecurityGroup

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS SQL Server
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DBSubnetGroup

  # RDS SQL Server Instance for TotalAgility
  TotalAgilityDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 100
      MaxAllocatedStorage: 1000
      DBInstanceClass: db.m6i.2xlarge
      Engine: sqlserver-se
      EngineVersion: 15.00.4236.7.v1  # SQL Server 2022
      LicenseModel: license-included
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: true
      StorageType: gp3
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7
      DeleteAutomatedBackups: false
      DeletionProtection: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TotalAgilityDB

  # RDS SQL Server Instance for RPA
  RPADB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 50
      MaxAllocatedStorage: 500
      DBInstanceClass: db.m6i.xlarge
      Engine: sqlserver-se
      EngineVersion: 15.00.4236.7.v1  # SQL Server 2022
      LicenseModel: license-included
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: true
      StorageType: gp3
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7
      DeleteAutomatedBackups: false
      DeletionProtection: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RPADB

  # TotalAgility Launch Template
  TotalAgilityLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-TotalAgility-LT
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0482455c4148846e3
        InstanceType: c5.2xlarge
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref AppTierSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 150
              VolumeType: gp3
              DeleteOnTermination: false
        UserData:
          Fn::Base64: !Sub |
            <powershell>
            # Enable multiple RDP sessions
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxInstanceCount" -Value 5
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            
            # Install IIS with ASP.NET
            Install-WindowsFeature -Name Web-Server,Web-Asp-Net45,Web-Net-Ext45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Mgmt-Console,Web-Scripting-Tools

            # Create directory for TotalAgility
            New-Item -Path "C:\TotalAgility" -ItemType Directory -Force

            # Download and install Visual C++ Redistributable packages
            $vcRedistUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
            $vcRedistPath = "C:\Windows\Temp\vc_redist.x64.exe"
            Invoke-WebRequest -Uri $vcRedistUrl -OutFile $vcRedistPath
            Start-Process -FilePath $vcRedistPath -ArgumentList "/install /quiet /norestart" -Wait

            # Open port 80 in Windows Firewall
            New-NetFirewallRule -DisplayName "Allow HTTP" -Direction Inbound -LocalPort 80 -Protocol TCP -Action Allow

            # Create a simple landing page
            $htmlContent = @"
            <!DOCTYPE html>
            <html>
            <head>
                <title>TotalAgility Server</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                    h1 { color: #0066cc; }
                </style>
            </head>
            <body>
                <h1>TotalAgility Server is running</h1>
                <p>The server is operational and ready to serve requests.</p>
                <p>Server Time: $([DateTime]::Now.ToString("yyyy-MM-dd HH:mm:ss"))</p>
            </body>
            </html>
            "@
            Set-Content -Path "C:\inetpub\wwwroot\index.html" -Value $htmlContent

            # Create a health check page
            $healthContent = "OK"
            Set-Content -Path "C:\inetpub\wwwroot\health.html" -Value $healthContent

            # Create a file to indicate setup is complete
            New-Item -Path "C:\TotalAgility\setup_complete.txt" -ItemType File -Value "Initial setup completed at $(Get-Date)"
            </powershell>

  # TotalAgility Auto Scaling Group
  TotalAgilityASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-TotalAgility-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref TotalAgilityLaunchTemplate
        Version: !GetAtt TotalAgilityLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref AppSubnet1
        - !Ref AppSubnet2
      TargetGroupARNs:
        - !Ref TotalAgilityTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TotalAgilityServer
          PropagateAtLaunch: true

  # RPA Launch Template
  RPALaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-RPA-LT
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0482455c4148846e3
        InstanceType: c5.xlarge
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref AppTierSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 100
              VolumeType: gp3
              DeleteOnTermination: false
        UserData:
          Fn::Base64: !Sub |
            <powershell>
            # Enable multiple RDP sessions
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MaxInstanceCount" -Value 5
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            
            # Create directory for RPA
            New-Item -Path "C:\RPA" -ItemType Directory -Force

            # Install Java 17
            $javaUrl = "https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe"
            $javaPath = "C:\Windows\Temp\jdk-17.exe"
            Invoke-WebRequest -Uri $javaUrl -OutFile $javaPath
            Start-Process -FilePath $javaPath -ArgumentList "/s" -Wait

            # Download and install Apache Tomcat 9
            $tomcatUrl = "https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.99/bin/apache-tomcat-9.0.99.exe"
            $tomcatPath = "C:\Windows\Temp\apache-tomcat-9.0.99.exe"
            Invoke-WebRequest -Uri $tomcatUrl -OutFile $tomcatPath
            Start-Process -FilePath $tomcatPath -ArgumentList "/S" -Wait

            # Install Python 3.9
            $pythonUrl = "https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe"
            $pythonPath = "C:\Windows\Temp\python-3.9.13-amd64.exe"
            Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonPath
            Start-Process -FilePath $pythonPath -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait

            # Open port 8080 in Windows Firewall
            New-NetFirewallRule -DisplayName "Allow Tomcat" -Direction Inbound -LocalPort 8080 -Protocol TCP -Action Allow

            # Create a simple health check page for Tomcat
            $healthContent = "OK"
            New-Item -Path "C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\ROOT" -ItemType Directory -Force
            Set-Content -Path "C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\ROOT\health.html" -Value $healthContent

            # Create a file to indicate setup is complete
            New-Item -Path "C:\RPA\setup_complete.txt" -ItemType File -Value "Initial setup completed at $(Get-Date)"
            </powershell>

  # RPA Auto Scaling Group
  RPAASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-RPA-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref RPALaunchTemplate
        Version: !GetAtt RPALaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref AppSubnet1
        - !Ref AppSubnet2
      TargetGroupARNs:
        - !Ref RPATargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RPAServer
          PropagateAtLaunch: true

  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base}}'
      InstanceType: t3.medium
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Install Remote Server Administration Tools
          Install-WindowsFeature -Name RSAT-RDS-Tools
          
          # Create a welcome message with connection instructions
          $welcomeMessage = @"
          =====================================================
          WELCOME TO THE BASTION HOST
          =====================================================
          
          Use this server to connect to private instances in the Auto Scaling Groups.
          
          To find the current instances:
          1. Open PowerShell
          2. Run: aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${EnvironmentName}-TotalAgility-ASG ${EnvironmentName}-RPA-ASG
          
          To connect, use Remote Desktop Connection and enter
          the private IP of the target server.
          =====================================================
          "@
          
          Set-Content -Path "C:\Users\Public\Desktop\CONNECTION-INSTRUCTIONS.txt" -Value $welcomeMessage
          
          # Install AWS CLI
          $awsCliUrl = "https://awscli.amazonaws.com/AWSCLIV2.msi"
          $awsCliPath = "C:\Windows\Temp\AWSCLIV2.msi"
          Invoke-WebRequest -Uri $awsCliUrl -OutFile $awsCliPath
          Start-Process -FilePath msiexec.exe -ArgumentList "/i $awsCliPath /quiet /norestart" -Wait
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionHost

  # Load Balancer for TotalAgility
  TotalAgilityALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-TotalAgilityALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '120'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebTierSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TotalAgilityALB

  TotalAgilityTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TotalAgilityTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health.html
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TotalAgilityTG

  TotalAgilityListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TotalAgilityTargetGroup
      LoadBalancerArn: !Ref TotalAgilityALB
      Port: 80
      Protocol: HTTP

  # Load Balancer for RPA
  RPAALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-RPAALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '120'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebTierSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RPAALB

  RPATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-RPATG
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health.html
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RPATG

  RPAListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RPATargetGroup
      LoadBalancerArn: !Ref RPAALB
      Port: 8080
      Protocol: HTTP

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  TotalAgilityALBDNSName:
    Description: DNS Name of the TotalAgility ALB
    Value: !GetAtt TotalAgilityALB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-TotalAgilityALBDNSName

  RPAALBDNSName:
    Description: DNS Name of the RPA ALB
    Value: !GetAtt RPAALB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-RPAALBDNSName

  TotalAgilityDBEndpoint:
    Description: Endpoint of the TotalAgility SQL Server RDS instance
    Value: !GetAtt TotalAgilityDB.Endpoint.Address
    Export:
      Name: !Sub ${EnvironmentName}-TotalAgilityDBEndpoint

  RPADBEndpoint:
    Description: Endpoint of the RPA SQL Server RDS instance
    Value: !GetAtt RPADB.Endpoint.Address
    Export:
      Name: !Sub ${EnvironmentName}-RPADBEndpoint
      
  BastionHostPublicIP:
    Description: Public IP of the Bastion Host
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-BastionHostPublicIP

  TotalAgilityASGName:
    Description: Name of the TotalAgility Auto Scaling Group
    Value: !Ref TotalAgilityASG
    Export:
      Name: !Sub ${EnvironmentName}-TotalAgilityASGName

  RPAASGName:
    Description: Name of the RPA Auto Scaling Group
    Value: !Ref RPAASG
    Export:
      Name: !Sub ${EnvironmentName}-RPAASGName
